name: CI
on: { push: { branches: [master] } }
env:
  LPM_PLUGINS: https://raw.githubusercontent.com/adamharrison/lite-xl-maintenance/latest/lpm-plugins/gh.lua
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setup_release.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - name: Setup Release
        id: setup_release
        env: { GITHUB_TOKEN: "${{ github.token }}" }
        run: |
          wget https://github.com/lite-xl/lite-xl-plugin-manager/releases/download/latest/lpm.x86_64-linux -O lpm-latest && chmod +x lpm-latest
          echo "version=`./lpm-latest gh version`" >> $GITHUB_OUTPUT
  build_linux:
    needs: [version]
    permissions: write-all
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: { fetch-depth: 0, submodules: true }
      - name: Build Linux
        run: docker run -v .:/terminal ubuntu:14.04 bash -c 'cd /terminal && apt-get update && apt-get install -y gcc-4.8 gcc-4.8-aarch64-linux-gnu && BIN=libterminal.aarch64-linux.so CC=aarch64-linux-gnu-gcc-4.8 ./build.sh -O3 -std=c99 -D_BSD_SOURCE -D_POSIX_SOURCE -DLIBTERMINAL_VERSION=\"${{ needs.version.outputs.version }}-aarch64-linux\" && CC=gcc-4.8 BIN=libterminal.x86_64-linux.so ./build.sh -std=c99 -D_BSD_SOURCE -D_POSIX_SOURCE -O3 -DLIBTERMINAL_VERSION=\"${{ needs.version.outputs.version }}-x86_64-linux\" '
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with: { name: "Linux", path: "*.so" }

  build_windows:
    needs: [version]
    permissions: write-all
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: { fetch-depth: 0, submodules: true }
      - name: Build Windows
        env: { GITHUB_TOKEN: "${{ github.token }}" }
        run: sudo apt-get install mingw-w64 && BIN=libterminal.x86_64-windows.dll CC=x86_64-w64-mingw32-gcc ./build.sh -O3 -DLIBTERMINAL_VERSION='"'${{ needs.version.outputs.version }}-x86_64-windows'"'
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with: { name: "Windows", path: "*.dll" }

  build_macos:
    needs: [version]
    runs-on: macos-latest
    env:
      CC: clang
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: { fetch-depth: 0, submodules: true }
      - name: Build MacOS
        env: { GITHUB_TOKEN: "${{ github.token }}" }
        run: |
          ./build.sh clean
          BIN=libterminal.x86_64-darwin.so ./build.sh -O3 -DLIBTERMINAL_VERSION='"'${{ needs.version.outputs.version }}-x86_64-darwin'"'
          BIN=libterminal.aarch64-darwin.so CC=clang CFLAGS="-arch arm64" ./build.sh -O3 -DLIBTERMINAL_VERSION='"'${{ needs.version.outputs.version }}-x86_64-darwin'"'
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with: { name: "MacOS", path: "*.so" }


  finalize:
    needs: [version, build_macos, build_linux, build_windows]
    runs-on: ubuntu-latest
    environment: Release
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with: { fetch-depth: 0 }
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with: { path: "." }
    - name: Perform Release
      env:
        GITHUB_TOKEN: "${{ github.token }}"
        LPM_DISCORD_WEBHOOK: "${{ secrets.DISCORD_WEBHOOK }}"
      run: |
        wget https://github.com/lite-xl/lite-xl-plugin-manager/releases/download/latest/lpm.x86_64-linux -O lpm-latest && chmod +x lpm-latest
        ./lpm-latest gh release Linux/*.so MacOS/*.so Windows/*.dll

